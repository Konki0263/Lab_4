`timescale 1ns/1ps
`default_nettype none
module user_proj_example #(
    parameter BITS = 32
)(
`ifdef USE_POWER_PINS
    inout vccd1,
    inout vssd1,
`endif


    input wb_clk_i,
    input wb_rst_i,
    input wbs_stb_i,
    input wbs_cyc_i,
    input wbs_we_i,
    input [3:0] wbs_sel_i,
    input [31:0] wbs_dat_i,
    input [31:0] wbs_adr_i,
    output [31:0] wbs_dat_o,
    output wbs_ack_o,


    input  [127:0] la_data_in,
    output [127:0] la_data_out,
    input  [127:0] la_oenb,


    input  [`MPRJ_IO_PADS-1:0] io_in,
    output [`MPRJ_IO_PADS-1:0] io_out,
    output [`MPRJ_IO_PADS-1:0] io_oeb,


    output [2:0] irq
);

    wire clk = wb_clk_i;
    wire rst = wb_rst_i;


    wire [31:0] wb_decode_dat_o;
    wire        wb_decode_ack_o;


    wire [31:0] exmem_dat_o;
    wire        exmem_ack_o;
    wire [31:0] axi_dat_o;
    wire        axi_ack_o;


    wb_decode wb_decode_inst (
        .clk(clk),
        .rst(rst),

        .wb_adr_i(wbs_adr_i),
        .wb_dat_i(wbs_dat_i),
        .wb_dat_o(wb_decode_dat_o),
        .wb_we_i(wbs_we_i),
        .wb_sel_i(wbs_sel_i),
        .wb_stb_i(wbs_stb_i),
        .wb_cyc_i(wbs_cyc_i),
        .wb_ack_o(wb_decode_ack_o),

        .exmem_adr_i(),
        .exmem_dat_i(),
        .exmem_dat_o(exmem_dat_o),
        .exmem_we_i(),
        .exmem_sel_i(),
        .exmem_stb_i(),
        .exmem_cyc_i(),
        .exmem_ack_o(exmem_ack_o),

        .axi_adr_i(),
        .axi_dat_i(),
        .axi_dat_o(axi_dat_o),
        .axi_we_i(),
        .axi_sel_i(),
        .axi_stb_i(),
        .axi_cyc_i(),
        .axi_ack_o(axi_ack_o)
    );

    assign wbs_dat_o = wb_decode_dat_o;
    assign wbs_ack_o = wb_decode_ack_o;


    exmem_fir exmem_fir_inst (
        .clk(clk),
        .rst(rst),
        .wb_adr_i(wbs_adr_i),
        .wb_dat_i(wbs_dat_i),
        .wb_dat_o(exmem_dat_o),
        .wb_we_i(wbs_we_i),
        .wb_sel_i(wbs_sel_i),
        .wb_stb_i(wbs_stb_i && (wbs_adr_i[31:20] == 12'h380)),
        .wb_cyc_i(wbs_cyc_i && (wbs_adr_i[31:20] == 12'h380)),
        .wb_ack_o(exmem_ack_o)
    );


    wb_axi_bridge #(
        .pADDR_WIDTH(12),
        .pDATA_WIDTH(32)
    ) wb_axi_bridge_inst (
        .clk(clk),
        .rst(rst),
        .wb_adr_i(wbs_adr_i),
        .wb_dat_i(wbs_dat_i),
        .wb_dat_o(axi_dat_o),
        .wb_we_i(wbs_we_i),
        .wb_sel_i(wbs_sel_i),
        .wb_stb_i(wbs_stb_i && (wbs_adr_i[31:20] == 12'h300)),
        .wb_cyc_i(wbs_cyc_i && (wbs_adr_i[31:20] == 12'h300)),
        .wb_ack_o(axi_ack_o),

        .awvalid(), .awaddr(), .wvalid(), .wdata(),
        .arvalid(), .araddr(), .rdata(32'h0), .rvalid(1'b0), .rready(),
        .awready(1'b1), .wready(1'b1), .arready(1'b1),

        .ss_tvalid(), .ss_tdata(), .ss_tready(1'b1),
        .sm_tvalid(1'b0), .sm_tdata(32'h0), .sm_tready()
    );

    assign io_out = 32'b0;
    assign io_oeb = {(`MPRJ_IO_PADS){1'b0}};
    assign irq = 3'b000;
    assign la_data_out = 128'b0;

endmodule

`default_nettype wire
